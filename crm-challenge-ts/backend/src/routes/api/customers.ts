import { FastifyRequest, FastifyReply, FastifyInstance } from 'fastify';
import { getCustomers } from '../../db/queries';
import { GetCustomerDto } from "@fiskaly/customer-model";

export default async function customers(fastify: FastifyInstance){
  fastify.route({
    method: 'GET',
    url: '/api/customer',
    schema: {
      response: {
        200: {
          type: 'array',
          items: {
            customer_id: {
              type: 'string',
              format: 'uuid'
            },
            first_name: {
              type: 'string'
            },
            last_name: {
              type: 'string'
            },
            mail: {
              type: 'string'
            },
            tsss: {
              type: 'array',
              items: {
                type: 'string',
                format: 'uuid'
              }
            }
          }
        }
      },
    },
    // this function is executed for every request before the handler is executed
    preHandler: (request: FastifyRequest, reply: FastifyReply, done) => {
      // E.g. check authentication
      done();
    },
    handler: async (request: FastifyRequest, reply: FastifyReply) => {
      // TODO: think about switching to pg-typed to have autogenerated types for params and result
      const customersRawResult: GetCustomerQueryResult[] = await getCustomers();
      console.log({ res: customersRawResult.map(({ tsss }) => (tsss)) })
      const customersResult = convertToDto(customersRawResult);

      console.log({ customersResult })

      reply.send(customersResult);
    }
  });
}

export interface GetCustomerQueryResult {
  customer_id: string;
  first_name: string;
  last_name: string;
  mail: string;
  tsss: string[];
}

const convertToDto = (queryResult: GetCustomerQueryResult[]): GetCustomerDto[] => {
  return queryResult.map(({ customer_id, first_name, last_name, mail, tsss }) => ({
    id: customer_id,
    firstName: first_name,
    lastName: last_name,
    mail,
    tsss: tsss.filter((tss) => tss !== null),
  }))
}
